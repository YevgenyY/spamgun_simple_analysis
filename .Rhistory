str(lm)
str(ls)
ls
ls
summary(x)
x<-rnorm(100,2,4)
?rnorm
x
summary(x)
str(x)
?gl
gl(40,10)
f<-gl(40,10)
summary(f)
?summary
library(dataset)
library(datasets)
head(airquality
)
str(airquality)
m<-matrix(rnorm(100),10,10)
str (m)
s <- split(airquality, airquality$Month)
s
str(s)
set.seed(10)
x<-rbinom(100, 1, 0.5)
y<-rnorm(100,0,2)
e<-rnorm(100,0,2)
y<- 0.5 + 2*x + e
plot(x,y)
e<-rnorm(100,0,2)
x<-rbinom(100, 1, 0.5)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<- 0.5 + 2*x + e
plot(x,y)
217 * 8
64 /
1736 / 64
1736 / 64
mean(c(4,14,7,5,4))
---
title: "RUSCREEN_roadmap"
author: "Yevgeny V.Yorkhov"
date: "20.04.2015"
output: html_document
---
## RUSCREEN Датацентр
```{r}
tmp <- c("40G", "SMTPetc", "API", "Signaling", "SigEngine", "Elbrus", "SSL")
val <- c(30,10,30,30,40,0,0)
datacenter <- data.frame(tmp,val)
dc_fin <- round(sum(datacenter[,2])/dim(datacenter)[1])
dc_fin
```
## RUSCREEN Центр Анализа DDOS-угроз
```{r}
tmp <- c("Repository", "CollectAPI", "DistributeAPI", "Updating", "ML", "AdminLearn", "SRC_IP_GENERATION", "AutoLearn", "ComplexAttackDetect", "Autonomous")
val <- c(50, 15, 10, 0, 30, 30, 30, 30, 0, 0)
atlas <- round(sum(val)/length(tmp))
atlas
```
## RUSCREEN Магистраль
```{r}
tmp <- c("40G", "SigEngine", "SendAPI", "GetAPI", "PPS_BPS", "Signaling", "DNS_NTP_WEB", "BGP_offramp", "BGP_flowspec", "NewSigEngine",
"TCPSteteful", "SMTP_Oauth_etc")
val <- c(30, 30, 10, 10, 40, 10, 30, 0, 0, 0, 40, 10)
mag_fin <- round(sum(val)/length(tmp))
mag_fin
```
## RUSCREEN Сеть
```{r}
tmp <- c("NetflowCollect", "Architecture", "Visualising", "BigDataStorage", "TCP_UDP_DNS_NTP", "REporting", "Signaling", "Profiling", "AnomalyDetect",
"Correlations", "Analytics")
val <- c(30, 10, 0, 0, 0, 0, 0, 0, 0, 10, 0)
net_fin <- round(sum(val)/length(tmp))
net_fin
```
## RUSCREEN Общая дорожная карта
```{r}
total <- c(dc_fin, atlas, mag_fin, net_fin)
total_fin <- round(sum(total)/length(total))
total_fin
```
1024 * 1024 * 1024 * 1024
1024 * 1024 * 1024 * 1024
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("ggplot2")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr", repos=NULL)
g <- ggplot(q1t, aes(x=q1t$date, y=q1t$score)) + geom_point(shape=1) # geom_bar(stat="identity")
g <- g + scale_x_date(breaks="2 day", labels=date_format("%Y-%m-%d"),
limits=c(min(q1t$date), max(q1t$date))) +
theme_bw() +
theme(axis.text.x = element_text(angle=90)) + geom_line()
g <- g + facet_grid(discipline ~ ., scales="free", space="fixed")
g <- g + xlab("Даты пересчёта средних оценок") + ylab("Средняя оценка по предмету")
g <- g + ggtitle("Изменение средних оценок '10-Г' класса\nпо всем предметам в первом семестре\n")
library(ggplot2)
library(lattice)
library(gridExtra)
library(scales)
load("school1.Rda")
student <- 662128
sclass <- "10-Г"
cid <- sclass
s0 <- subset(df, df$sid == student)
s1 <- subset(df, df$cid == sclass)
s2 <- df[grep("10", df$cid),]
s2 <- subset(s2, !is.na(s2$sid))
# Средняя оценка по каждому ученику, по каждому предмету в классе
s0s1mn <- data.frame(tapply(s1$score, s1[,c(2,4)], function(x) round(mean(x),2)))
s0s1sd <- data.frame(tapply(s1$score, s1[,c(2,4)], function(x) round(sd(x),2)))
s1mn <- data.frame(tapply(s1$score, s1$discipline, function(x) round(mean(x),2)))
s1sd <- data.frame(tapply(s1$score, s1$discipline, function(x) round(sd(x),2)))
lst <- cbind(s1mn, s1sd)
names(lst) <- c("Средняя оценка", "Стандартное отклонение")
ordlst <- lst[order(-lst[,1]),]
print("Средние оценки по классу с начала года")
ordlst
res <- data.frame(matrix(NA, nrow = 0, ncol = 3)) # 14 disciplines, 3 columns
names(res) <- c("sid", "discipline", "score")
i<-1
for (i in 1:dim(s0s1mn)[1]) {
tmp <- data.frame(matrix(NA, nrow = dim(s0s1mn)[2], ncol = 3)) # 14 disciplines, 3 columns
tmp[,1] <- as.numeric(row.names(s0s1mn[i,]))
tmp[,2] <- names(s0s1mn)
tmp[,3] <- matrix(t(s0s1mn[i,]))
names(tmp[,3]) <- ""
names(tmp) <- c("sid", "discipline", "score")
res <- rbind(res, tmp)
}
library(lubridate)
first_q = "2014-10-31"
second_q = ymd("2014-12-31")
third_q = ymd("1015-03-24")
#library(plyr)
q1 <- subset(s1, date <= first_q)
#q1$date <- ymd(q1$date)
#q1$date <- as.character(q1$date)
ds <- min(q1$date)
de <- max(q1$date)
cbind.fill <- function(...){
nm <- list(...)
nm <- lapply(nm, as.matrix)
n <- max(sapply(nm, nrow))
do.call(cbind, lapply(nm, function (x)
rbind(x, matrix(, n-nrow(x), ncol(x)))))
}
# Add mean for the semestr
res <- data.frame(tapply(q1$score, q1$discipline, mean))
names(res) <- de
i <- ds
while( i <= de) {
q1tmp <- subset(q1, date <= i)
tmp <- data.frame(tapply(q1tmp$score, q1tmp$discipline, mean))
names(tmp) <- as.character(i)
res <- cbind.fill(res, tmp)
i <- i + 1 # add 1 day
}
# q1 mean by day
q1md <- data.frame(res)
names(q1md) <- gsub("X", "", names(q1md))
# Print table
#q1md
# prepare data for plotting
res <- data.frame(matrix(NA, nrow = 0, ncol = 3)) # 14 disciplines, 3 columns
names(res) <- c("discipline", "date", "score")
i<-1
for (i in 1:dim(q1md)[1]) {
tmp <- data.frame(matrix(NA, nrow = dim(q1md)[2], ncol = 3))
tmp[,1] <- row.names(q1md[i,])
tmp[,2] <- names(q1md)
tmp[,3] <- round(matrix(t(q1md[i,])), 2)
names(tmp[,3]) <- ""
names(tmp) <- c("discipline", "date", "score")
res <- rbind(res, tmp)
}
q1t <- res
q1t$date <- as.Date(gsub("\\.", "-", q1t$date))
q1t$date
q1t
q1 <- subset(s1, date <= first_q)
#q1$date <- ymd(q1$date)
#q1$date <- as.character(q1$date)
ds <- min(q1$date)
de <- max(q1$date)
cbind.fill <- function(...){
nm <- list(...)
nm <- lapply(nm, as.matrix)
n <- max(sapply(nm, nrow))
do.call(cbind, lapply(nm, function (x)
rbind(x, matrix(, n-nrow(x), ncol(x)))))
}
# Add mean for the semestr
res <- data.frame(tapply(q1$score, q1$discipline, mean))
names(res) <- de
i <- ds
while( i <= de) {
q1tmp <- subset(q1, date <= i)
tmp <- data.frame(tapply(q1tmp$score, q1tmp$discipline, mean))
names(tmp) <- as.character(i)
res <- cbind.fill(res, tmp)
i <- i + 1 # add 1 day
}
# q1 mean by day
q1md <- data.frame(res)
names(q1md) <- gsub("X", "", names(q1md))
# Print table
#q1md
# prepare data for plotting
res <- data.frame(matrix(NA, nrow = 0, ncol = 3)) # 14 disciplines, 3 columns
names(res) <- c("discipline", "date", "score")
i<-1
for (i in 1:dim(q1md)[1]) {
tmp <- data.frame(matrix(NA, nrow = dim(q1md)[2], ncol = 3))
tmp[,1] <- row.names(q1md[i,])
tmp[,2] <- names(q1md)
tmp[,3] <- round(matrix(t(q1md[i,])), 2)
names(tmp[,3]) <- ""
names(tmp) <- c("discipline", "date", "score")
res <- rbind(res, tmp)
}
q1 <- subset(s1, date <= first_q)
#q1$date <- ymd(q1$date)
#q1$date <- as.character(q1$date)
ds <- min(q1$date)
de <- max(q1$date)
cbind.fill <- function(...){
nm <- list(...)
nm <- lapply(nm, as.matrix)
n <- max(sapply(nm, nrow))
do.call(cbind, lapply(nm, function (x)
rbind(x, matrix(, n-nrow(x), ncol(x)))))
}
res <- data.frame(tapply(q1$score, q1$discipline, mean))
names(res) <- de
de
q1
q1 <- subset(s1, date <= first_q)
#q1$date <- ymd(q1$date)
#q1$date <- as.character(q1$date)
ds <- min(q1$date)
de <- max(q1$date)
q1 <- subset(s1, date <= first_q)
s0 <- subset(df, df$sid == student)
s1 <- subset(df, df$cid == sclass)
s2 <- df[grep("10", df$cid),]
s2 <- subset(s2, !is.na(s2$sid))
load("school1.Rda")
student <- 662128
sclass <- "10-Г"
cid <- sclass
s0 <- subset(df, df$sid == student)
s1 <- subset(df, df$cid == sclass)
s2 <- df[grep("10", df$cid),]
s2 <- subset(s2, !is.na(s2$sid))
x <- rrnorm(0,1)
x <- rnorm(0,1)
x
?rnorm
x <- rnorm(10,0,1)
x
y <- rnorm(10,0,1)
y
t.test(x,y)
setwd("/home/eugen/research/spamgun_simple_analysis")
conn <- file("msg_size_by_domain.csv")
dat <- readLines(conn)
fin <- list()
mx <- matrix(nrow=0, ncol=4)
dom_vec <- c()
sizes_bulk <- c()
# put all data into a list
for (i in 1:length(dat)) {
tmp <- dat[[i]]
a <- strsplit(tmp, ",")
domain <- a[[1]][1]
dom_vec[i] <- domain
sizes <- as.numeric( a[[1]][2:length(a[[1]])] )
sizes_bulk <- c(sizes_bulk, sizes)
# find values
tmp <- list(domain, sizes, length(sizes), mean(sizes), median(sizes), sd(sizes))
names(tmp) <- c("domain", "sizes", "msg_count", "mean", "median", "sd")
fin[i] <- list(tmp)
# here we can access values like this fin[[1]]$domain ...
mx <- rbind(mx, c(fin[[i]]$msg_count, fin[[i]]$mean,
fin[[i]]$median, fin[[i]]$sd))
}
df <- data.frame(mx)
names(df) <- c("msg_count", "mean", "median", "sd")
# Plot msg count
# df <- df[order(df$msg_count),]
plot(df$msg_count, main="Количество сообщений по доменам за период", xlab="номер домена",
ylab="коли-во сообщений за период", col="blue", pch=19)
lines(df$msg_count, col="blue")
# Plot
plot(df$mean, main="Cреднее значение размера сообщений по доменам", xlab="номер домена",
ylab="средний размер сообщения в байтах",
pch=19, col="blue")
lines(df$mean, col="blue")
abline(h=mean(df$mean), col="red")
# Plot
plot(df$median, main="Медиана размера сообщений по доменам", xlab="номер домена",
ylab="средний размер сообщения (медиана) в байтах",
pch=19, col="blue")
lines(df$median, col="blue")
abline(h=mean(df$median), col="red")
txt <- paste("Средний размер сообщения (по медиане) равен", round(mean(df$median),0), "байт", sep=" ")
text(20, mean(df$median) + 20000, txt)
df
plot(sizes_bulk)
sizes_bulk
\
plot(sizes_bulk, colour="blue")
?plot
ва
df
hist(sizes_bulk)
hist(sizes_bulk, colour="blue")
?hist
hist(sizes_bulk, freq=T)
hist(sizes_bulk, freq=)
hist(sizes_bulk, xlilm=2e+07)
hist(sizes_bulk, xlilm=200000)
hist(sizes_bulk, main="Частоты размеров сообщений")
hist(sizes_bulk, main="Частоты размеров сообщений", xlab="размеры сообщений", ylab="частота")
# Plot
plot(df$mean, main="Cреднее значение размера сообщений по доменам", xlab="номер домена",
ylab="средний размер сообщения в байтах",
pch=19, col="blue")
lines(df$mean, col="blue")
abline(h=mean(df$mean), col="red")
# Plot mean
plot(df$mean, main="Cреднее значение размера сообщений по доменам", xlab="номер домена",
ylab="средний размер сообщения в байтах",
pch=19, col="blue")
lines(df$mean, col="blue")
abline(h=mean(df$mean), col="red")
# Plot median
plot(df$median, main="Медиана размера сообщений по доменам", xlab="номер домена",
ylab="средний размер сообщения (медиана) в байтах",
pch=19, col="blue")
lines(df$median, col="blue")
abline(h=mean(df$median), col="red")
txt <- paste("Средний размер сообщения (по медиане) равен", round(mean(df$median),0), "байт", sep=" ")
text(20, mean(df$median) + 20000, txt)
